{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Profile.module.css","redux/profile-reducer.js","redux/dialogs-reducer.js","redux/redux-store.js","components/Header/Header.jsx","components/Navbar/Navbar.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","redux/state.js","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","posts","id","message","likesCount","newPostText","profileReducer","state","action","type","newPost","newText","dialogs","name","messages","newMessageBody","dialogsReducer","body","reducers","combineReducers","profilePage","dialogsPage","store","createStore","Header","className","styles","header","src","alt","Navbar","nav","item","to","activeClassName","active","Post","props","likeCounts","MyPosts","postsElement","map","p","newPostElement","React","createRef","postsBlock","onChange","text","current","value","updateNewPostText","ref","onClick","addPost","ProfileInfo","descriptionBlock","_state","_callSubscriber","console","log","getState","this","subscribe","observer","dispatch","window","MyPostsContainer","connect","updateNewPostTextActionCreator","Profile","News","Music","Settings","DialogItem","path","dialog","Message","Dialogs","dialogsElements","d","key","messagesElements","m","dialogsItems","e","target","updateNewMessageBody","placeholder","sendMessage","DialogsContainer","updateNewMessageBodyCreator","App","render","component","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.e9eb4951.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1aLFg\",\"item\":\"Navbar_item__aFErr\",\"active\":\"Navbar_active__20aQm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3kft-\",\"dialogsItems\":\"Dialogs_dialogsItems__f1X5L\",\"dialog\":\"Dialogs_dialog__q747G\",\"messages\":\"Dialogs_messages__P34wu\",\"message\":\"Dialogs_message__1F_Fg\",\"active\":\"Dialogs_active__3CoCC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1KTaa\",\"posts\":\"MyPosts_posts__e4A94\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1G_-D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2Azl4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__13Bx_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__3iatl\"};","const ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi! How are you?', likesCount: 15},\r\n        {id: 1, message: 'It\\'s my new post.', likesCount: 20}\r\n    ],\r\n    newPostText: 'it-incubator.com'\r\n\r\n}\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            };\r\n        }\r\n\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {...state,\r\n            newPostText: action.newText\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const addPostActionCreator = () => ({type: ADD_POST})\r\nexport const updateNewPostTextActionCreator = (text) => ({type: UPDATE_NEW_POST_TEXT, newText: text })\r\nexport default profileReducer","const UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_MESSAGE_BODY';\r\nconst SEND_MESSAGE = 'SEND_MESSAGE';\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Lera'},\r\n        {id: 2, name: 'Nadya'},\r\n        {id: 3, name: 'Sasha'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'How ti'},\r\n        {id: 2, message: 'Hi'},\r\n        {id: 3, message: 'ku'}\r\n    ],\r\n    newMessageBody: ''\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {\r\n                ...state,\r\n                newMessageBody: action.body\r\n            }\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody;\r\n            return {\r\n                ...state,\r\n                newMessageBody : '',\r\n                messages: [...state.messages, {id: 4, message: body}]\r\n            }\r\n        default:   return state\r\n        }\r\n\r\n    }\r\n\r\nexport const sendMessageCreator = () => ({type: SEND_MESSAGE})\r\nexport const updateNewMessageBodyCreator = (body) => ({type: UPDATE_NEW_MESSAGE_BODY, body: body })\r\nexport default dialogsReducer;","import {combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer\r\n})\r\n\r\nlet store = createStore(reducers);\r\n//автоматически createStore создаёт внутри себя state у которого есть\r\n//св-ва которые указаны в reducers\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport styles from './Header.module.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n\r\n        <header className={styles.header}>\r\n            <img\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Logo_TV_2015.svg/1164px-Logo_TV_2015.svg.png\"\r\n                alt=\"logj\"\r\n            />\r\n        </header>\r\n    )\r\n}\r\nexport default Header;","import React from 'react';\r\nimport styles from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={styles.nav}>\r\n            <div className={styles.item}><NavLink to={\"/profile\"} activeClassName={styles.active}>Profile</NavLink></div>\r\n            <div className={styles.item}><NavLink to={\"/dialogs\"} activeClassName={styles.active}>Messages</NavLink></div>\r\n            <div className={styles.item}><NavLink to={'/news'} activeClassName={styles.active}>News</NavLink></div>\r\n            <div className={styles.item}><NavLink to={'/music'} activeClassName={styles.active}>Music</NavLink></div>\r\n            <div className={styles.item}><NavLink to={'/settings'} activeClassName={styles.active}>Settings</NavLink></div>\r\n\r\n        </nav>\r\n    )\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport styles from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n                    <div className={styles.item}>\r\n                        <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg' />\r\n                        {props.message}\r\n                        <div>\r\n                            <span>like {props.likeCounts}</span>\r\n                        </div>\r\n                    </div>\r\n    )\r\n}\r\nexport default Post;","import React from 'react';\r\nimport styles from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\r\n\r\nconst MyPosts = (props) => {\r\n\r\n    let postsElement = props.posts.map(p => <Post message={p.message} likeCounts={p.likesCount}/>)\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = () => {\r\n        props.addPost()\r\n    };\r\n\r\n    let onPostChange = () => {\r\n        let text = newPostElement.current.value;\r\n       props.updateNewPostText(text);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={styles.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea onChange={onPostChange} ref={newPostElement} value={props.newPostText}> </textarea>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n                {/* <button>Remove</button>*/}\r\n\r\n\r\n            </div>\r\n            <div className={styles.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default MyPosts;","import React from 'react';\r\nimport styles from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileInfo = () => {\r\n    return (\r\n        <div>\r\n        <div>\r\n            <img src=\"https://im0-tub-ru.yandex.net/i?id=94c19fabc812f4298f7b613f5b971cf9&n=13\"\r\n                 alt=\"\"/>\r\n        </div>\r\n    <div className={styles.descriptionBlock}>\r\n        ava+description\r\n    </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo;","import profileReducer from \"./profile-reducer\";\nimport dialogsReducer from \"./dialogs-reducer\";\n\nlet store = {\n    _state: {\n        profilePage: {\n            posts: [\n                {id: 1, message: 'Hi! How are you?', likesCount: 15},\n                {id: 1, message: 'It\\'s my new post.', likesCount: 20}\n            ],\n            newPostText: 'it-incubator.com'\n\n        },\n        dialogsPage: {\n            dialogs: [\n                {id: 1, name: 'Lera'},\n                {id: 2, name: 'Nadya'},\n                {id: 3, name: 'Sasha'}\n            ],\n            messages: [\n                {id: 1, message: 'How ti'},\n                {id: 2, message: 'Hi'},\n                {id: 3, message: 'ku'}\n            ],\n            newMessageBody: ''\n        }\n    },\n    _callSubscriber() {\n        console.log('State changed')\n    },\n\n    getState() {\n        return this._state\n    },\n    subscribe(observer) {\n        this._callSubscriber = observer; //паттерн. почитать\n    },\n\n    dispatch(action) {\n\n        this._state.profilePage = profileReducer(this._state.profilePage, action)\n        this._state.dialogsPage = dialogsReducer(this._state.dialogsPage, action)\n        this._callSubscriber(this._state)\n    }\n}\n\n\n\n\nexport default store;\nwindow.state = store //это для того чтобы можно было в консоли просто прописать state и он там отобразится","import React from 'react';\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateNewPostText: (text) => {\r\n            let action = updateNewPostTextActionCreator(text);\r\n            dispatch(action)\r\n        },\r\n        addPost: () => {\r\n            dispatch(addPostActionCreator())\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport styles from './Profile.module.css';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {updateNewPostText} from \"../../redux/state\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\n\r\nconst Profile = (props) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport styles from './News.module.css';\r\n\r\n\r\nconst News = (props) => {\r\n    return (\r\n        <div>\r\nNews\r\n        </div>\r\n    )\r\n}\r\nexport default News;","import React from 'react';\r\nimport styles from './Music.module.css';\r\n\r\n\r\nconst Music = (props) => {\r\n    return (\r\n        <div>\r\nMusic\r\n        </div>\r\n    )\r\n}\r\nexport default Music;","import React from 'react';\r\nimport styles from './Settings.module.css';\r\n\r\n\r\nconst Settings = (props) => {\r\n    return (\r\n        <div>\r\nSettings\r\n        </div>\r\n    )\r\n}\r\nexport default Settings;","import React from 'react';\r\nimport styles from './Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reducer\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={styles.dialog + ' ' + styles.active}>\r\n            <NavLink to={path}> {props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message = (props) => {\r\n    return <div className={styles.message}>{props.message}</div>\r\n}\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>)\r\n    let newMessageBody = state.newMessageBody\r\n\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage()\r\n    }\r\n    let onNewMessageChange = (e) => {\r\n        let body = e.target.value;\r\n        props.updateNewMessageBody(body)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={styles.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <div><textarea\r\n                        value={newMessageBody}\r\n                        onChange={onNewMessageChange}\r\n                        placeholder={'Enter your message'}\r\n                    ></textarea></div>\r\n                    <div>\r\n                        <button onClick={onSendMessageClick}>Send</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs;","import React from 'react';\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\n\r\n//настаивает данные из стэйта\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n//настраивает колбэки, которые мы будем отправлять в презентационную компоненту\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateNewMessageBody: (body) => {\r\n           dispatch(updateNewMessageBodyCreator(body))\r\n        },\r\n        sendMessage: () => {\r\n           dispatch(sendMessageCreator())\r\n        }\r\n    }\r\n}\r\n\r\n//контейнерная компонента\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\nexport default DialogsContainer;","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header/Header';\nimport Navbar from './components/Navbar/Navbar';\nimport Profile from './components/Profile/Profile';\nimport {Route} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport store, {updateNewPostText} from \"./redux/state\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\n\nconst App = (props) => {\n\n    return (\n\n            <div className=\"app-wrapper\">\n                <Header/>\n                <Navbar/>\n\n                <div className=\"app-wrapper-content\">\n                    <Route path={'/profile'} render={() => <Profile/>}/>\n                    <Route path={'/dialogs'} render={() => <DialogsContainer />}/>\n                    <Route path={'/news'} component={News}/>\n                    <Route path={'/music'} component={Music}/>\n                    <Route path={'/settings'} component={Settings}/>\n                </div>\n\n            </div>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import store from './redux/redux-store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n// import {Provider} from \"./StoreContext\";\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}